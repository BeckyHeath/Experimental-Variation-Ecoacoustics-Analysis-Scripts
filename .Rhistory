#SET UP FILE LOCATION AND READ DB
setwd(getSrcDirectory()[1])
#SET UP FILE LOCATION AND READ DB
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Load Libraries and set working directory ####
library("dplyr")
# Load Libraries and set working directory ####
library("dplyr")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
id.audiosets <- read.csv("Data_Analytical_Indices.csv", header = T)
#GET ID NUMBER AS A FACTOR:
id.audiosets$id.no <- as.factor(id.audiosets$id.no)
id.audiosets <- id.audiosets[complete.cases(id.audiosets),]
dif.audiosets <- read.csv("Difference_Data_Analytical_Indices.csv")
dif.audiosets <- read.csv("Difference_Data_AudioSet_Fingerprint.csv")
dif.analytical <- <- read.csv("Difference_Data_Analytical_Indices.csv")
dif.analytical <- read.csv("Difference_Data_Analytical_Indices.csv")
dif.AF <- dif.audiosets(where dif.audiosets$frame.size == "2_5min")
dif.AF <- dif.audiosets(where(dif.audiosets$frame.size == "2_5min"))
dif.AF <- dif.audiosets[where(dif.audiosets$frame.size == "2_5min"),]
dif.AF <- dif.audiosets[(dif.audiosets$frame.size == "2_5min"),]
dif.AI <- dif.audiosets[(dif.audiosets$frame.size == "2_5min"),]
library("car")
# Generate Plots
dif.AF <- dif.audiosets[(dif.audiosets$compression == "VBR0"),]
qqPlot(dif.AF$total.abs.dif)
# Generate Plots
dif.AF <- dif.audiosets[(dif.audiosets$compression == "CBR320"),]
qqPlot(dif.AF$total.abs.dif)
# Generate Plots
dif.AF <- dif.audiosets[(dif.audiosets$compression == "CBR8"),]
qqPlot(dif.AF$total.abs.dif)
# Generate Plots
for(i in c("VBR0", "CBR320", "CBR256")){
print(i)
}
# Generate Plots
for(i in c("VBR0", "CBR320", "CBR256","CBR128","CBR64", "CBR32","CBR16", "CBR8")){
print(i)
}
dif.AI <- dif.analytical[(dif.audiosets$frame.size == "2_5min"),]
# Taking 2.5min as an example:
dif.AF <- dif.audiosets[(dif.audiosets$frame.size == "2_5min"),]
dif.AI <- dif.analytical[(dif.audiosets$frame.size == "2_5min"),]
# Generate Plots
for(i in c("VBR0", "CBR320", "CBR256","CBR128","CBR64", "CBR32","CBR16", "CBR8")){
dif.AF <- dif.audiosets[(dif.audiosets$frame.size == i),]
}
# Generate Plots
for(i in c("VBR0", "CBR320", "CBR256","CBR128","CBR64", "CBR32","CBR16", "CBR8")){
dif.AF <- dif.audiosets[(dif.audiosets$compression == i),]
}
# Generate Plots
for(i in c("VBR0", "CBR320", "CBR256","CBR128","CBR64", "CBR32","CBR16", "CBR8")){
dif.AF <- dif.audiosets[(dif.audiosets$compression == i),]
plot <- qqPlot(dif.AF$total.abs.dif)
var_name <- paste("plt_AF_",i)
assign("var_name",plot)
}
# Generate Plots
for(i in c("VBR0", "CBR320", "CBR256","CBR128","CBR64", "CBR32","CBR16", "CBR8")){
dif.AF <- dif.audiosets[(dif.audiosets$compression == i),]
plot <- qqPlot(dif.AF$total.abs.dif)
var_name <- paste("plt_AF_",i)
assign(var_name,plot)
}
library(patchwork)
library("patchwork")
top <- plt_AF_ VBR0 | plt_AF_CBR320 | plt_AF_256 | plt_AF_128
top
# Generate Plots
for(i in c("VBR0", "CBR320", "CBR256","CBR128","CBR64", "CBR32","CBR16", "CBR8")){
dif.AF <- dif.audiosets[(dif.audiosets$compression == i),]
plot <- qqPlot(dif.AF$total.abs.dif)
var_name <- paste("plt_AF_",i, sep="")
assign(var_name,plot)
}
top <- plt_AF_VBR0 | plt_AF_CBR320 | plt_AF_256 | plt_AF_128
top <- plt_AF_VBR0 | plt_AF_CBR320 | plt_AF_CBR256 | plt_AF_CBR128
top
`plt_AF_ CBR128`
plt_AF_ CBR128
# Generate Plots
for(i in c("VBR0", "CBR320", "CBR256","CBR128","CBR64", "CBR32","CBR16", "CBR8")){
dif.AF <- dif.audiosets[(dif.audiosets$compression == i),]
plot <- qqPlot(dif.AF$total.abs.dif)
var_name <- paste("plt_AF_",i, sep="")
assign(var_name, plot)
}
top <- plt_AF_VBR0 | plt_AF_CBR320 | plt_AF_CBR256 | plt_AF_CBR128
top
library("ggplot2")
library("patchwork")
# Generate Plots
for(i in c("VBR0", "CBR320", "CBR256","CBR128","CBR64", "CBR32","CBR16", "CBR8")){
dif.AF <- dif.audiosets[(dif.audiosets$compression == i),]
plot <- qplot(dif.AF$total.abs.dif)
var_name <- paste("plt_AF_",i, sep="")
assign(var_name, plot)
}
`plt_AF_ CBR128`
plt_AF_ CBR128
plt_AF_CBR128
# Generate Plots
for(i in c("VBR0", "CBR320", "CBR256","CBR128","CBR64", "CBR32","CBR16", "CBR8")){
dif.AF <- dif.audiosets[(dif.audiosets$compression == i),]
plot <- ggplot(dif.AF, aes(sample=total.abs.dif))+stat_qq()
var_name <- paste("plt_AF_",i, sep="")
assign(var_name, plot)
}
top <- plt_AF_VBR0 | plt_AF_CBR320 | plt_AF_CBR256 | plt_AF_CBR128
top
bottom <- plt_AF_CBR64 | plt_AF_CBR32 | plt_AF_CBR16 | plt_AF_CBR8
top/bottom
b_w_plot <- top/bottom
# Generate Plots
for(i in c("VBR0", "CBR320", "CBR256","CBR128","CBR64", "CBR32","CBR16", "CBR8")){
dif.AF <- dif.audiosets[(dif.audiosets$compression == i),]
plot <- ggqqplot(dif.AF, x = "total.abs.dif")
var_name <- paste("plt_AF_",i, sep="")
assign(var_name, plot)
}
plot <- ggqqplot(dif.AF, x = "total.abs.dif")
library("ggpubr")
# Generate Plots
for(i in c("VBR0", "CBR320", "CBR256","CBR128","CBR64", "CBR32","CBR16", "CBR8")){
dif.AF <- dif.audiosets[(dif.audiosets$compression == i),]
plot <- ggqqplot(dif.AF, x = "total.abs.dif")
var_name <- paste("plt_AF_",i, sep="")
assign(var_name, plot)
}
top <- plt_AF_VBR0 | plt_AF_CBR320 | plt_AF_CBR256 | plt_AF_CBR128
bottom <- plt_AF_CBR64 | plt_AF_CBR32 | plt_AF_CBR16 | plt_AF_CBR8
top/bottom
top/bottom + plot_annotation(title = "QQ Plot AudioSet")
# Taking 2.5min as an example:
dif.AF <- dif.audiosets[(dif.audiosets$frame.size == "20min"),]
# Generate Plots
for(i in c("VBR0", "CBR320", "CBR256","CBR128","CBR64", "CBR32","CBR16", "CBR8")){
dif.AF <- dif.audiosets[(dif.audiosets$compression == i),]
plot <- ggqqplot(dif.AF, x = "total.abs.dif")
var_name <- paste("plt_AF_",i, sep="")
assign(var_name, plot)
}
top <- plt_AF_VBR0 | plt_AF_CBR320 | plt_AF_CBR256 | plt_AF_CBR128
bottom <- plt_AF_CBR64 | plt_AF_CBR32 | plt_AF_CBR16 | plt_AF_CBR8
top/bottom + plot_annotation(title = "QQ Plot AudioSet")
# Analytical Indices
for(i in c("VBR0", "CBR320", "CBR256","CBR128","CBR64", "CBR32","CBR16", "CBR8")){
dif.AI <- dif.analytical[(dif.analytical$compression == i),]
for(j in c("ACI", "ADI", "Aeev", "Bio", "H","M","NDSI")){
plot <- ggqqplot(dif.AI, x = j)
var_name <- paste("plt_AI_",i,"_",j, sep="")
assign(var_name, plot)
}
}
# Analytical Indices
for(i in c("ACI", "ADI", "Aeev", "Bio", "H","M","NDSI")){
for(j in c("VBR0", "CBR320", "CBR256","CBR128","CBR64", "CBR32","CBR16", "CBR8")){
dif.AI <- dif.analytical[(dif.analytical$compression == j),]
plot <- ggqqplot(dif.AI, x = i)
var_name <- paste("plt_AI_",i,"_",j, sep="")
assign(var_name, plot)
}
top <- plt_AI_VBR0 | plt_AI_CBR320 | plt_AI_CBR256 | plt_AI_CBR128
bottom <- plt_AI_CBR64 | plt_AI_CBR32 | plt_AI_CBR16 | plt_AI_CBR8
plot_title <- paste("QQ Plot Analytical ",i,sep="")
top/bottom + plot_annotation(title = plot_title)
}
# Analytical Indices
for(i in c("ACI", "ADI", "Aeev", "Bio", "H","M","NDSI")){
for(j in c("VBR0", "CBR320", "CBR256","CBR128","CBR64", "CBR32","CBR16", "CBR8")){
dif.AI <- dif.analytical[(dif.analytical$compression == j),]
plot <- ggqqplot(dif.AI, x = i)
var_name <- paste("plt_AI_",j, sep="")
assign(var_name, plot)
}
top <- plt_AI_VBR0 | plt_AI_CBR320 | plt_AI_CBR256 | plt_AI_CBR128
bottom <- plt_AI_CBR64 | plt_AI_CBR32 | plt_AI_CBR16 | plt_AI_CBR8
plot_title <- paste("QQ Plot Analytical ",i,sep="")
top/bottom + plot_annotation(title = plot_title)
}
top
top/bottom
top/bottom + plot_annotation(title = "howdy")
plot_title
top/bottom + plot_annotation(title = plot_title)
# Analytical Indices
for(i in c("ACI", "ADI", "Aeev", "Bio", "H","M","NDSI")){
for(j in c("VBR0", "CBR320", "CBR256","CBR128","CBR64", "CBR32","CBR16", "CBR8")){
dif.AI <- dif.analytical[(dif.analytical$compression == j),]
plot <- ggqqplot(dif.AI, x = i, title = j)
var_name <- paste("plt_AI_",j, sep="")
assign(var_name, plot)
}
top <- plt_AI_VBR0 | plt_AI_CBR320 | plt_AI_CBR256 | plt_AI_CBR128
bottom <- plt_AI_CBR64 | plt_AI_CBR32 | plt_AI_CBR16 | plt_AI_CBR8
plot_title <- paste("QQ Plot Analytical ",i,sep="")
patch_plot <- top/bottom + plot_annotation(title = plot_title)
out_lab = paste("qq",i, sep="")
assign(out_lab,patch_plot)
}
qqNDSI
# AudioSet
for(i in c("VBR0", "CBR320", "CBR256","CBR128","CBR64", "CBR32","CBR16", "CBR8")){
dif.AF <- dif.audiosets[(dif.audiosets$compression == i),]
plot <- ggqqplot(dif.AF, x = "total.abs.dif", title = i)
var_name <- paste("plt_AF_",i, sep="")
assign(var_name, plot)
}
top <- plt_AF_VBR0 | plt_AF_CBR320 | plt_AF_CBR256 | plt_AF_CBR128
bottom <- plt_AF_CBR64 | plt_AF_CBR32 | plt_AF_CBR16 | plt_AF_CBR8
top/bottom + plot_annotation(title = "QQ Plot AudioSet")
# Analytical Indices
for(i in c("ACI", "ADI", "Aeev", "Bio", "H","M","NDSI")){
for(j in c("VBR0", "CBR320", "CBR256","CBR128","CBR64", "CBR32","CBR16", "CBR8")){
dif.AI <- dif.analytical[(dif.analytical$compression == j),]
plot <- ggqqplot(dif.AI, x = i, title = j)
var_name <- paste("plt_AI_",j, sep="")
assign(var_name, plot)
}
top <- plt_AI_VBR0 | plt_AI_CBR320 | plt_AI_CBR256 | plt_AI_CBR128
bottom <- plt_AI_CBR64 | plt_AI_CBR32 | plt_AI_CBR16 | plt_AI_CBR8
plot_title <- paste("QQ Plot Analytical ",i,sep="")
patch_plot <- top/bottom + plot_annotation(title = plot_title)
out_lab = paste("qq",i, sep="")
assign(out_lab,patch_plot)
}
top <- plt_AF_VBR0 | plt_AF_CBR320 | plt_AF_CBR256 | plt_AF_CBR128
one <- qqACI | qqADI
two <- qqAeev | qqBio
three <- qqH | qqM
four <- qqNDSI
one/two/three/four
qqACI
qqADI
qqAeev
qqBio
qqH
qqM
qqNDSI
install.packages(c("hexbin", "latticeExtra"))
#### Load Packages and Set Working Directory
library("randomForest")
library("tidyr")
library(plyr)
library(MASS)
library(dplyr)
library(ggplot2)
library(ggfortify)
library(stringr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#### Load dataframe and Format Time: ####
data <- read.csv("Data_AudioSet_Fingerprint.csv")
data$site <- as.factor(data$site)
data <-
data %>%
mutate(time = str_pad(time, 4, side = 'left', pad = '0'))
time_chunks_12 <- function(times){
#print(times)
x <- substr(times,1,2) #GET FIRST TWO CHARACTERS
print(x)
if (x %in% c("22","23")) {
times <- "Midnight1"
} else if (x %in% c("00","01")) {
times <- "Midnight2"
} else if (x %in% c("02","03")) {
times <- "Midnight3"
} else if (x %in% c("04","05")) {
times <- "Early AM1"
} else if (x %in% c("06","07")) {
times <- "Early AM2"
} else if (x %in% c("08","09")) {
times <- "Early AM3"
} else if (x %in% c("10","11")) {
times <- "Midday1"
} else if (x %in% c("12","13")) {
times <- "Midday2"
} else if (x %in% c("14","15")) {
times <- "Midday3"
} else if (x %in% c("16","17")) {
times <- "Dusk1"
} else if (x %in% c("18","19")) {
times <- "Dusk2"
} else if (x %in% c("20","21")) {
times <- "Dusk3"
}
#print(times)
#return(times)
}
time_chunks_8 <- function(times){
#print(times)
x <- substr(times,1,2) #GET FIRST TWO CHARACTERS
print(x)
if (x %in% c("23","00","01")) {
times <- "Midnight"
} else if (x %in% c("02","03","04")) {
times <- "Early AM"
} else if (x %in% c("05","06","07")) {
times <- "Dawn"
} else if (x %in% c("08","09","10")) {
times <- "Morning"
} else if (x %in% c("11","12","13")) {
times <- "Midday"
} else if (x %in% c("14","15","16")) {
times <- "Afternoon"
} else if (x %in% c("17","18","19")) {
times <- "Dusk"
} else if (x %in% c("20","21","22")) {
times <- "Evening"
}
#print(times)
#return(times)
}
time_chunks_4 <- function(times){
x <- substr(times,1,2) #GET FIRST TWO CHARACTERS
print(x)
if (x %in% c("22","23","00","01", "02", "03")) {
times <- "Quarter_Day_Midnight"
} else if (x %in% c("04","05","06","07","08","09")) {
times <- "Quarter_Day_Dawn"
} else if (x %in% c("10","11","12","13","14","15")) {
times <- "Quarter_Day_Midday"
} else if (x %in% c("16","17","18","19","20","21")) {
times <- "Quarter_Day_Dusk"
}
}
do_analysis <- function(data_hold, chunks) {
###################GENERATE METAdata:
#Get Req_Time
frame.size = as.character(data_hold$frame.size[1])
#Get Compression
compression = as.character(data_hold$compression[1])
#Get time period Metadata
time_period = as.character(data_hold$time[1])
#Get time period Metadata
file.size = as.character(data_hold$file.size[1])
level.out = paste(index.type,frame.size, compression, chunks, time_period, sep= " ")
### TRAIN AND TEST THE MODEL, THEN GET ACCURACY
test_data <- data_hold[!data_hold$date == '2019_2_28',]
model_data <- data_hold[data_hold$date == '2019_2_28',]
model_data <- subset(model_data, select=-c(id.no,file.size, frame.size, compression, date, time, req.freq))
test_data <- subset(test_data, select=-c(id.no, file.size, frame.size, compression, date, time,req.freq))
rf <- randomForest(site ~ ., data = model_data, mtry = 3, ntree=2000, importance = TRUE)
rf.predict <- predict(rf, newdata = test_data)
conf.rf=table(test_data$site, rf.predict)
accuracy = sum(diag(conf.rf))/sum(conf.rf)
precision = (conf.rf[1,1]/sum(conf.rf[,1]) + conf.rf[2,2]/sum(conf.rf[,2]) + conf.rf[3,3]/sum(conf.rf[,3]))/3
recall = (conf.rf[1,1]/sum(conf.rf[1,]) + conf.rf[2,2]/sum(conf.rf[2,]) + conf.rf[3,3]/sum(conf.rf[3,]))/3
x <- data.frame(compression, file.size, frame.size , accuracy, precision, recall, time_period, chunks, index.type)
conf.filename = paste("Confusion_Matricies/",index.type,frame.size,compression,chunks,time_period,".csv" ,sep ="_")
tocsv <- cbind(conf.rf[,1],conf.rf[,2],conf.rf[,3])
write.table(tocsv, file = conf.filename, sep = ",", append = TRUE, quote = FALSE,col.names = FALSE, row.names = TRUE)
write.table(x, file = "RF_Accuracy_both_Aug_test.csv", sep = ",", append = TRUE, quote = FALSE,
col.names = FALSE, row.names = FALSE)
}
