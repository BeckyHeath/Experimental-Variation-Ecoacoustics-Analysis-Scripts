Aeev.range <- as.numeric(range(full.data$Aeev, na.rm = TRUE)[2] - range(full.data$Aeev, na.rm = TRUE)[1])
Bio.range <- as.numeric(range(full.data$Bio, na.rm = TRUE)[2] - range(full.data$Bio, na.rm = TRUE)[1])
H.range <- as.numeric(range(full.data$H, na.rm = TRUE)[2] - range(full.data$H, na.rm = TRUE)[1])
M.range <- as.numeric(range(full.data$M, na.rm = TRUE)[2] - range(full.data$M, na.rm = TRUE)[1])
NDSI.range <- as.numeric(range(full.data$NDSI, na.rm = TRUE)[2] - range(full.data$NDSI, na.rm = TRUE)[1])
#Find value as % of range:
dif.data$ACI <- as.numeric(dif.data$Aci)/ACI.range *100
dif.data$ADI <- as.numeric(dif.data$ADI)/ADI.range *100
dif.data$Aeev <- as.numeric(dif.data$Aeev)/Aeev.range *100
dif.data$Bio <- as.numeric(dif.data$Bio)/Bio.range *100
dif.data$H <- as.numeric(dif.data$H)/H.range *100
dif.data$M <- as.numeric(dif.data$M)/M.range *100
dif.data$NDSI <- as.numeric(dif.data$NDSI)/NDSI.range *100
for(i in c("Aci", "ADI", "Aeev", "Bio","H","M", "NDSI", "max.freq")){
index <- dif.data[,c("id.no", i, "compression")]
wide = index %>%
spread(compression, i)
assign(i,wide)
for(j in c( "CBR320","CBR256", "VBR0", "CBR128", "CBR64", "CBR32", "CBR16", "CBR16","CBR8","RAW")){
test.comp <- wide[,j]
out.compression<-as.character(j)
out.index <- as.character(i)
out.frame.size <- as.character(k)
out.median <- as.numeric(quantile(test.comp,0.5, na.rm=TRUE))
out.lower <- as.numeric(quantile(test.comp,0.25, na.rm=TRUE))
out.higher <- as.numeric(quantile(test.comp,0.75, na.rm=TRUE))
out.row <- data.frame(index = out.index, compression= out.compression, frame.size = out.frame.size,
median = out.median, lower = out.lower, higher = out.higher)
out.file <- rbind(out.file, out.row)
print(paste0(i," : ",j))
}
}
}
out.file$compression = as.factor(ifelse(is.na(out.file$compression), "RAW", out.file$compression))
write.csv(out.file, "Dataframes/Median_and_Quartiles_Analytical_Indices.csv")
###### Generate Medians and Quartiles as % raw range (AUDIOSET) ######
full.data.og <- dataset.audiosets
dif.data.og <- abs.dif.audiosets
### GET IT AS A % OF RANGE
j=0
k=0
data.out <- dif.data.og[0,]
for(k in c("20min","10min","5min","2_5min")){
full.data <- full.data.og[full.data.og$frame.size== k,]
full.data <- full.data[full.data$compression == "RAW",]
dif.data <- dif.data.og[dif.data.og$frame.size== k,]
data.grp <- dif.data
for(j in seq(1:128)){
col.name <- paste0("feat",j)
full.col <- full.data[,col.name]
col.range <- as.numeric(range(full.col, na.rm = TRUE)[2] - range(full.col, na.rm = TRUE)[1])
#print(col.range)
dif.col <- data.grp[,col.name]
dif.col <- (dif.col/col.range)*100
data.grp[,col.name] <- dif.col
print(j)
}
data.out <- rbind(data.out,data.grp)
}
### data.out is now difference as a % of range for each individual index!
data.out <- data.frame(data.out)
data.out[is.na(data.out)] <- 0
###### TO GET JUST ONE VALUE PER FILE:
data.out$total.dif.R <- rowSums(data.out[8:135])/128
data.out$total.abs.R <- rowSums(abs(data.out[8:135]))/128
dif.stats <- data.out[,-c(8:135)]
out.file <- data.frame(index=character(),
compression=character(),
frame.size=character(),
median=numeric(),
higher=numeric(),
lower=numeric(),
stringsAsFactors=FALSE)
i = 0
j = 0
k = 0
for(k in c("20min","10min","5min","2_5min")){
dif.stats.x <- dif.stats[dif.stats$frame.size== k,]
for(i in c("total.dif","total.abs.dif","total.dif.R","total.abs.R")){
index <- dif.stats.x[,c("id.no", i, "compression")]
wide = index %>%
spread(compression, i)
assign(i,wide)
for(j in c( "CBR320","CBR256", "VBR0", "CBR128", "CBR64", "CBR32", "CBR16", "CBR16","CBR8","RAW")){
test.comp <- wide[,j]
out.compression<-as.character(j)
out.index <- as.character(i)
out.frame.size <- as.character(k)
out.median <- as.numeric(quantile(test.comp,0.5, na.rm=TRUE))
out.lower <- as.numeric(quantile(test.comp,0.25, na.rm=TRUE))
out.higher <- as.numeric(quantile(test.comp,0.75, na.rm=TRUE))
out.row <- data.frame(index = out.index, compression= out.compression, frame.size = out.frame.size,
median = out.median, lower = out.lower, higher = out.higher)
out.file <- rbind(out.file, out.row)
print(paste0(i," : ",j))
}
}
}
out.file$compression = as.factor(ifelse(is.na(out.file$compression), "RAW", out.file$compression))
write.csv(out.file, "Dataframes/Median_and_Quartiles_AudioSet_Fingerprint.csv")
##### Load in Raw Data and Difference Data : ####
dataset.index <- read.csv("Dataframes/Data_Analytical_Indices.csv")
dataset.audiosets <- read.csv("Dataframes/Data_AudioSet_Fingerprint.csv")
abs.dif.index <- read.csv("Dataframes/Difference_Data_Analytical_Indices.csv")
abs.dif.audiosets <- read.csv("Dataframes/Difference_Data_AudioSet_Fingerprint.csv")
# Convert data to as a % of range
# Find range of each column
full.data.og <- dataset.index
dif.data.og <- abs.dif.index
# Convert data to as a % of range
# Find range of each column
full.data.og <- dataset.index
dif.data.og <- abs.dif.index
View(full.data)
# Load in Dataframes
full.data.og <- dataset.index
dif.data.og <- abs.dif.index
full.data.og$compression <- as.factor(full.data.og$compression)
# Initialise Output Dataframe
out.file <- data.frame(index=character(),
compression=character(),
frame.size=character(),
median=numeric(),
higher=numeric(),
lower=numeric(),
stringsAsFactors=FALSE)
i = 0
j = 0
k = 0
# Load in Dataframes
full.data.og <- dataset.index
dif.data.og <- abs.dif.index
full.data.og$compression <- as.factor(full.data.og$compression)
# Initialise Output Dataframe
out.file <- data.frame(index=character(),
compression=character(),
frame.size=character(),
median=numeric(),
higher=numeric(),
lower=numeric(),
stringsAsFactors=FALSE)
i = 0
j = 0
k = 0
# Subset data for Appropriate Frame size
full.data <- full.data.og[full.data.og$frame.size== k,]
k = "20min"
# Subset data for Appropriate Frame size
full.data <- full.data.og[full.data.og$frame.size== k,]
full.data <- full.data[full.data$compression == "RAW",]
dif.data <- dif.data.og[dif.data.og$frame.size== k,]
range(full.data$Aci, na.rm = TRUE
)
full.data$ACI
range(full.data$ACI, na.rm = TRUE)
# Find the Range (highest - lowest) of the raw of the relevant frame size
ACI.range <- as.numeric(range(full.data$ACI, na.rm = TRUE)[2] - range(full.data$Aci, na.rm = TRUE)[1])
# Find the Range (highest - lowest) of the raw of the relevant frame size
ACI.range <- as.numeric(range(full.data$ACI, na.rm = TRUE)[2] - range(full.data$ACI, na.rm = TRUE)[1])
ADI.range <- as.numeric(range(full.data$ADI, na.rm = TRUE)[2] - range(full.data$ADI, na.rm = TRUE)[1])
Aeev.range <- as.numeric(range(full.data$Aeev, na.rm = TRUE)[2] - range(full.data$Aeev, na.rm = TRUE)[1])
Bio.range <- as.numeric(range(full.data$Bio, na.rm = TRUE)[2] - range(full.data$Bio, na.rm = TRUE)[1])
H.range <- as.numeric(range(full.data$H, na.rm = TRUE)[2] - range(full.data$H, na.rm = TRUE)[1])
M.range <- as.numeric(range(full.data$M, na.rm = TRUE)[2] - range(full.data$M, na.rm = TRUE)[1])
NDSI.range <- as.numeric(range(full.data$NDSI, na.rm = TRUE)[2] - range(full.data$NDSI, na.rm = TRUE)[1])
# Load in Dataframes
full.data.og <- dataset.index
dif.data.og <- abs.dif.index
full.data.og$compression <- as.factor(full.data.og$compression)
# Initialise Output Dataframe
out.file <- data.frame(index=character(),
compression=character(),
frame.size=character(),
median=numeric(),
higher=numeric(),
lower=numeric(),
stringsAsFactors=FALSE)
i = 0
j = 0
k = 0
for(k in c("20min","10min","5min","2_5min")){
# Subset data for Appropriate Frame size (just use Raw)
full.data <- full.data.og[full.data.og$frame.size== k,]
full.data <- full.data[full.data$compression == "RAW",]
# Subset difference Data for Appropriate Frame Size
dif.data <- dif.data.og[dif.data.og$frame.size== k,]
# Find the Range (highest - lowest) of the raw of the relevant frame size
ACI.range <- as.numeric(range(full.data$ACI, na.rm = TRUE)[2] - range(full.data$ACI, na.rm = TRUE)[1])
ADI.range <- as.numeric(range(full.data$ADI, na.rm = TRUE)[2] - range(full.data$ADI, na.rm = TRUE)[1])
Aeev.range <- as.numeric(range(full.data$Aeev, na.rm = TRUE)[2] - range(full.data$Aeev, na.rm = TRUE)[1])
Bio.range <- as.numeric(range(full.data$Bio, na.rm = TRUE)[2] - range(full.data$Bio, na.rm = TRUE)[1])
H.range <- as.numeric(range(full.data$H, na.rm = TRUE)[2] - range(full.data$H, na.rm = TRUE)[1])
M.range <- as.numeric(range(full.data$M, na.rm = TRUE)[2] - range(full.data$M, na.rm = TRUE)[1])
NDSI.range <- as.numeric(range(full.data$NDSI, na.rm = TRUE)[2] - range(full.data$NDSI, na.rm = TRUE)[1])
# Expresss Difference as % of range:
dif.data$ACI <- as.numeric(dif.data$ACI)/ACI.range *100
dif.data$ADI <- as.numeric(dif.data$ADI)/ADI.range *100
dif.data$Aeev <- as.numeric(dif.data$Aeev)/Aeev.range *100
dif.data$Bio <- as.numeric(dif.data$Bio)/Bio.range *100
dif.data$H <- as.numeric(dif.data$H)/H.range *100
dif.data$M <- as.numeric(dif.data$M)/M.range *100
dif.data$NDSI <- as.numeric(dif.data$NDSI)/NDSI.range *100
# Iterate through each parameter and find median and quartile values:
for(i in c("ACI", "ADI", "Aeev", "Bio","H","M", "NDSI", "max.freq")){
index <- dif.data[,c("id.no", i, "compression")]
wide = index %>%
spread(compression, i)
assign(i,wide)
for(j in c( "CBR320","CBR256", "VBR0", "CBR128", "CBR64", "CBR32", "CBR16", "CBR16","CBR8","RAW")){
test.comp <- wide[,j]
out.compression<-as.character(j)
out.index <- as.character(i)
out.frame.size <- as.character(k)
out.median <- as.numeric(quantile(test.comp,0.5, na.rm=TRUE))
out.lower <- as.numeric(quantile(test.comp,0.25, na.rm=TRUE))
out.higher <- as.numeric(quantile(test.comp,0.75, na.rm=TRUE))
out.row <- data.frame(index = out.index, compression= out.compression, frame.size = out.frame.size,
median = out.median, lower = out.lower, higher = out.higher)
out.file <- rbind(out.file, out.row)
print(paste0(i," : ",j))
}
}
}
# Load in Dataframes
full.data.og <- dataset.index
dif.data.og <- abs.dif.index
full.data.og$compression <- as.factor(full.data.og$compression)
# Initialise Output Dataframe
out.file <- data.frame(index=character(),
compression=character(),
frame.size=character(),
median=numeric(),
higher=numeric(),
lower=numeric(),
stringsAsFactors=FALSE)
i = 0
j = 0
k = 0
for(k in c("20min","10min","5min","2_5min")){
# Subset data for Appropriate Frame size (just use Raw)
full.data <- full.data.og[full.data.og$frame.size== k,]
full.data <- full.data[full.data$compression == "RAW",]
# Subset difference Data for Appropriate Frame Size
dif.data <- dif.data.og[dif.data.og$frame.size== k,]
# Find the Range (highest - lowest) of the raw of the relevant frame size
ACI.range <- as.numeric(range(full.data$ACI, na.rm = TRUE)[2] - range(full.data$ACI, na.rm = TRUE)[1])
ADI.range <- as.numeric(range(full.data$ADI, na.rm = TRUE)[2] - range(full.data$ADI, na.rm = TRUE)[1])
Aeev.range <- as.numeric(range(full.data$Aeev, na.rm = TRUE)[2] - range(full.data$Aeev, na.rm = TRUE)[1])
Bio.range <- as.numeric(range(full.data$Bio, na.rm = TRUE)[2] - range(full.data$Bio, na.rm = TRUE)[1])
H.range <- as.numeric(range(full.data$H, na.rm = TRUE)[2] - range(full.data$H, na.rm = TRUE)[1])
M.range <- as.numeric(range(full.data$M, na.rm = TRUE)[2] - range(full.data$M, na.rm = TRUE)[1])
NDSI.range <- as.numeric(range(full.data$NDSI, na.rm = TRUE)[2] - range(full.data$NDSI, na.rm = TRUE)[1])
# Expresss Difference as % of range:
dif.data$ACI <- as.numeric(dif.data$ACI)/ACI.range *100
dif.data$ADI <- as.numeric(dif.data$ADI)/ADI.range *100
dif.data$Aeev <- as.numeric(dif.data$Aeev)/Aeev.range *100
dif.data$Bio <- as.numeric(dif.data$Bio)/Bio.range *100
dif.data$H <- as.numeric(dif.data$H)/H.range *100
dif.data$M <- as.numeric(dif.data$M)/M.range *100
dif.data$NDSI <- as.numeric(dif.data$NDSI)/NDSI.range *100
# Iterate through each parameter and find median and quartile values:
for(i in c("ACI", "ADI", "Aeev", "Bio","H","M", "NDSI")){
index <- dif.data[,c("id.no", i, "compression")]
wide = index %>%
spread(compression, i)
assign(i,wide)
for(j in c( "CBR320","CBR256", "VBR0", "CBR128", "CBR64", "CBR32", "CBR16", "CBR16","CBR8","RAW")){
test.comp <- wide[,j]
out.compression<-as.character(j)
out.index <- as.character(i)
out.frame.size <- as.character(k)
out.median <- as.numeric(quantile(test.comp,0.5, na.rm=TRUE))
out.lower <- as.numeric(quantile(test.comp,0.25, na.rm=TRUE))
out.higher <- as.numeric(quantile(test.comp,0.75, na.rm=TRUE))
out.row <- data.frame(index = out.index, compression= out.compression, frame.size = out.frame.size,
median = out.median, lower = out.lower, higher = out.higher)
out.file <- rbind(out.file, out.row)
print(paste0(i," : ",j))
}
}
}
out.file$compression = as.factor(ifelse(is.na(out.file$compression), "RAW", out.file$compression))
write.csv(out.file, "Dataframes/Median_and_Quartiles_Analytical_Indices.csv")
###### Generate Medians and Quartiles as % raw range (AUDIOSET) ######
full.data.og <- dataset.audiosets
dif.data.og <- abs.dif.audiosets
j = 5
col.name <- paste0("feat",j)
full.col <- full.data[,col.name]
# Load Dataframes
full.data.og <- dataset.audiosets
dif.data.og <- abs.dif.audiosets
# Initialise Output File
j=0
k=0
data.out <- dif.data.og[0,]
# Subset the Raw data of the right frame size
full.data <- full.data.og[full.data.og$frame.size== k,]
full.data <- full.data[full.data$compression == "RAW",]
#Subset Difference data of right frame size
dif.data <- dif.data.og[dif.data.og$frame.size== k,]
data.grp <- dif.data
k
k = "20min"
# Subset the Raw data of the right frame size
full.data <- full.data.og[full.data.og$frame.size== k,]
full.data <- full.data[full.data$compression == "RAW",]
#Subset Difference data of right frame size
dif.data <- dif.data.og[dif.data.og$frame.size== k,]
data.grp <- dif.data
col.name <- paste0("feat",j)
full.col <- full.data[,col.name]
col.name
j = 5
col.name <- paste0("feat",j)
full.col <- full.data[,col.name]
# Find Range of Raw Values
col.range <- as.numeric(range(full.col, na.rm = TRUE)[2] - range(full.col, na.rm = TRUE)[1])
#
dif.col <- data.grp[,col.name]
dif.col <- (dif.col/col.range)*100
data.grp[,col.name] <- dif.col
View(data.grp)
print(j)
# Load Dataframes
full.data.og <- dataset.audiosets
dif.data.og <- abs.dif.audiosets
# Initialise Output File
j=0
k=0
data.out <- dif.data.og[0,]
for(k in c("20min","10min","5min","2_5min")){
# Subset the Raw data of the right frame size
full.data <- full.data.og[full.data.og$frame.size== k,]
full.data <- full.data[full.data$compression == "RAW",]
#Subset Difference data of right frame size
dif.data <- dif.data.og[dif.data.og$frame.size== k,]
data.grp <- dif.data
for(j in seq(1:128)){
col.name <- paste0("feat",j)
full.col <- full.data[,col.name]
# Find Range of Raw Values
col.range <- as.numeric(range(full.col, na.rm = TRUE)[2] - range(full.col, na.rm = TRUE)[1])
#
dif.col <- data.grp[,col.name]
dif.col <- (dif.col/col.range)*100
data.grp[,col.name] <- dif.col
print(j)
}
data.out <- rbind(data.out,data.grp)
}
### data.out is now difference as a % of range for each individual index!
data.out <- data.frame(data.out)
data.out[is.na(data.out)] <- 0
###### TO GET JUST ONE VALUE PER FILE:
data.out$total.dif.R <- rowSums(data.out[8:135])/128
data.out$total.abs.R <- rowSums(abs(data.out[8:135]))/128
dif.stats <- data.out[,-c(8:135)]
out.file <- data.frame(index=character(),
compression=character(),
frame.size=character(),
median=numeric(),
higher=numeric(),
lower=numeric(),
stringsAsFactors=FALSE)
# Then Find Median and IQRs
i = 0
j = 0
k = 0
for(k in c("20min","10min","5min","2_5min")){
dif.stats.x <- dif.stats[dif.stats$frame.size== k,]
for(i in c("total.dif","total.abs.dif","total.dif.R","total.abs.R")){
index <- dif.stats.x[,c("id.no", i, "compression")]
wide = index %>%
spread(compression, i)
assign(i,wide)
for(j in c( "CBR320","CBR256", "VBR0", "CBR128", "CBR64", "CBR32", "CBR16", "CBR16","CBR8","RAW")){
test.comp <- wide[,j]
out.compression<-as.character(j)
out.index <- as.character(i)
out.frame.size <- as.character(k)
out.median <- as.numeric(quantile(test.comp,0.5, na.rm=TRUE))
out.lower <- as.numeric(quantile(test.comp,0.25, na.rm=TRUE))
out.higher <- as.numeric(quantile(test.comp,0.75, na.rm=TRUE))
out.row <- data.frame(index = out.index, compression= out.compression, frame.size = out.frame.size,
median = out.median, lower = out.lower, higher = out.higher)
out.file <- rbind(out.file, out.row)
print(paste0(i," : ",j))
}
}
}
out.file$compression = as.factor(ifelse(is.na(out.file$compression), "RAW", out.file$compression))
write.csv(out.file, "Dataframes/Median_and_Quartiles_AudioSet_Fingerprint.csv")
### load packages and set working Directory ####
library(stringr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
### load confusion matrix data ####
files <- list.files(path ="Confusion_Matricies/")
### load packages and set working Directory ####
library(stringr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
### load confusion matrix data ####
files <- list.files(path ="Confusion_Matricies/")
#Perform Data Extraction
out.file<-data.frame()
for (x in files){
path <- paste("Confusion_Matricies/",x, sep="")
cm <- read.csv(path, header = FALSE)
meta <- str_split(x, "_")
Ind <- meta[[1]][[2]]
if (Ind == "Analytical"){                  ########## Analytical Indices
frame.size <- meta[[1]][[4]]
if (frame.size == 2){                    # Fix 2.5 min problem
frame.size <- paste(meta[[1]][4:5], collapse= ".")
Comp <- meta[[1]][[6]]
chunks <- meta[[1]][[7]]
Time <- meta[[1]][[8]]
if (chunks == 4){                     # Sort the Quarter Day Thing
TM <- meta[[1]][8:10]
Time <- paste(TM, collapse =' ')
}
} else {                     #So if there's no issue with the 2.5
Comp <- meta[[1]][[5]]
chunks <- meta[[1]][[6]]
Time <- meta[[1]][[7]]
if (chunks == 4){           # Again the quarter day thing
TM <- meta[[1]][7:9]
Time <- paste(TM, collapse =' ')
}
}
} else {                    ######### AudioSet Here
frame.size <- meta[[1]][[3]]
if (frame.size == 2){                 # Sorting the 2.5 thing
frame.size <- paste(meta[[1]][3:4], collapse= ".")
Comp <- meta[[1]][[5]]
Time <- meta[[1]][[7]]
chunks <- meta[[1]][[6]]
if (chunks == 4){             # Sorting the Quarter day thing
TM <- meta[[1]][7:9]
Time <- paste(TM, collapse =' ')
}
} else {
Comp <- meta[[1]][[4]]
print(meta)
print(Comp)
Time <- meta[[1]][[6]]
chunks <- meta[[1]][[5]]
if (chunks == 4){
TM <- meta[[1]][6:8]
Time <- paste(TM, collapse =' ')
}
}
}
## Write Out.Line (9 per File)
#01 Site 1 Guessed 1
Obs <- cm[1,1]
Pred <- Obs
N <- cm[1,2]
out.line <- data.frame(Obs,Ind,Comp,Pred,Time,N,chunks,frame.size)
out.file <-rbind(out.file,out.line)
#02 Site 1 Guessed 2
Obs <- cm[1,1]
Pred <- cm[2,1]
N <- cm[1,3]
out.line <- data.frame(Obs,Ind,Comp,Pred,Time,N,chunks,frame.size)
out.file <-rbind(out.file,out.line)
#03 Site 1 Guessed 3
Obs <- cm[1,1]
Pred <- cm[3,1]
N <- cm[1,4]
out.line <- data.frame(Obs,Ind,Comp,Pred,Time,N,chunks,frame.size)
out.file <-rbind(out.file,out.line)
#04 Site 2 Guessed 1
Obs <- cm[2,1]
Pred <- cm[1,1]
N <- cm[2,2]
out.line <- data.frame(Obs,Ind,Comp,Pred,Time,N,chunks,frame.size)
out.file <-rbind(out.file,out.line)
#05 Site 2 Guessed 2
Obs <- cm[2,1]
Pred <- Obs
N <- cm[2,3]
out.line <- data.frame(Obs,Ind,Comp,Pred,Time,N,chunks,frame.size)
out.file <-rbind(out.file,out.line)
#06 Site 2 Guessed 3
Obs <- cm[2,1]
Pred <- cm[3,1]
N <- cm[2,4]
out.line <- data.frame(Obs,Ind,Comp,Pred,Time,N,chunks,frame.size)
out.file <-rbind(out.file,out.line)
#07 Site 3 Guessed 1
Obs <- cm[3,1]
Pred <- cm[1,1]
N <- cm[3,2]
out.line <- data.frame(Obs,Ind,Comp,Pred,Time,N,chunks,frame.size)
out.file <-rbind(out.file,out.line)
#08 Site 3 Guessed 2
Obs <- cm[3,1]
Pred <- cm[2,1]
N <- cm[3,3]
out.line <- data.frame(Obs,Ind,Comp,Pred,Time,N,chunks,frame.size)
out.file <-rbind(out.file,out.line)
#09 Site 3 Guessed 3
Obs <- cm[3,1]
Pred <- Obs
N <- cm[3,4]
out.line <- data.frame(Obs,Ind,Comp,Pred,Time,N,chunks,frame.size)
out.file <-rbind(out.file,out.line)
rm(Obs,Ind,Comp,Pred,Time,N,chunks,frame.size)                           ### CLEAR VARIABLES
}
}
write.csv(out.file, "Dataframes/Complete_Confusion_Matrix_data.csv", row.names = FALSE)
